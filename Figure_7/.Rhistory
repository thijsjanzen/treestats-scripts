setwd("/Users/thijsjanzen/Library/CloudStorage/Dropbox/projects/treestats/Scripts/Figure_7/")
library(treestats)
require(nodeSub)
tree_size <- 256
max_steps <- tree_size - ceiling(log2(tree_size)) - 1 # - log2(tree_size) - 1
found <- c()
num_repl <- 1000
total_cnt <- num_repl * max_steps
pb <- txtProgressBar(max = total_cnt, style = 3)
cnt <- 1
for (r in 1:num_repl) {
simulated_tree <- ape::rphylo(n = tree_size, birth = 1, death = 0.0)
brts <- treestats::branching_times(simulated_tree)
balanced_tree <- nodeSub::create_balanced_tree(brts)
for (n in 1:max_steps) {
for (g1 in c("any", "terminal")) {
for (g2 in c("random", "youngest", "oldest")) {
unbal_tree <- treestats::make_unbalanced_tree(balanced_tree, n, g1, g2)
focal_stats <- treestats::calc_balance_stats(unbal_tree, normalize = FALSE)
to_add <- c(r, n, g1, g2, as.numeric(focal_stats))
found <- rbind(found, to_add)
}
}
cnt <- cnt + 1
}
setTxtProgressBar(pb, cnt)
}
library(treestats)
require(nodeSub)
tree_size <- 256
max_steps <- tree_size - ceiling(log2(tree_size)) - 1 # - log2(tree_size) - 1
found <- c()
num_repl <- 100
total_cnt <- num_repl * max_steps
pb <- txtProgressBar(max = total_cnt, style = 3)
cnt <- 1
for (r in 1:num_repl) {
simulated_tree <- ape::rphylo(n = tree_size, birth = 1, death = 0.0)
brts <- treestats::branching_times(simulated_tree)
balanced_tree <- nodeSub::create_balanced_tree(brts)
for (n in 1:max_steps) {
for (g1 in c("any", "terminal")) {
for (g2 in c("random", "youngest", "oldest")) {
unbal_tree <- treestats::make_unbalanced_tree(balanced_tree, n, g1, g2)
focal_stats <- treestats::calc_balance_stats(unbal_tree, normalize = FALSE)
to_add <- c(r, n, g1, g2, as.numeric(focal_stats))
found <- rbind(found, to_add)
}
}
cnt <- cnt + 1
}
setTxtProgressBar(pb, cnt)
}
library(tidyverse)
library(dplyr)
test_stuff <- treestats::calc_balance_stats(balanced_tree, normalize = FALSE)
colnames(found) <- c("repl", "n", "method1", "method2", names(test_stuff))
found <- tibble::as_tibble(found)
num_pars <- dim(found)[2]
found <- found %>%
mutate_at(c(2, 5:num_pars), as.numeric)
found$combined_method <- NA
for (i in 1:length(found$repl)) {
a1 <- found$method1[i]
a2 <- found$method2[i]
if (a1 == "any") {
if (a2 == "random") found$combined_method[i] <- "A-R"
if (a2 == "youngest") found$combined_method[i] <- "A-Y"
if (a2 == "oldest") found$combined_method[i] <- "A-O"
}
if (a1 == "terminal") {
if (a2 == "random") found$combined_method[i] <- "T-R"
if (a2 == "youngest") found$combined_method[i] <- "T-Y"
if (a2 == "oldest") found$combined_method[i] <- "T-O"
}
}
found$combined_method <- factor(found$combined_method,
levels = c("A-R", "A-O", "A-Y", "T-R", "T-O", "T-Y"))
require(tidyr)
to_plot <- found %>%
filter(combined_method != "A-Y") %>%
gather(key = "stat", val = "balance", -c(n, method1, method2, repl, combined_method)) %>%
group_by(n, method1, method2, stat, combined_method) %>%
summarise("mean_balance" = mean(balance)) %>%
ggplot(aes(x = n, y = mean_balance, col = combined_method)) +
geom_line(lwd = 1.3) +
facet_wrap(~stat, scales = "free") +
theme_classic() +
scale_color_manual(values = c("#4f4dbc", "#8c8cff", "#b54440", "#ff7837", "#fbe1c2")) +
theme(text = element_text(family = "Helvetica")) +
ylab("Statistic value") +
xlab("Number of steps taken towards fully imbalanced tree") +
labs(col = "Algorithm")
to_plot
ggsave(to_plot, filename = "Figure_7_1k_repl.pdf", width = 20, height = 15)
library(treestats)
require(nodeSub)
tree_size <- 128
max_steps <- tree_size - ceiling(log2(tree_size)) - 1 # - log2(tree_size) - 1
found <- c()
num_repl <- 10
total_cnt <- num_repl * max_steps
pb <- txtProgressBar(max = total_cnt, style = 3)
cnt <- 1
for (r in 1:num_repl) {
simulated_tree <- ape::rphylo(n = tree_size, birth = 1, death = 0.0)
brts <- treestats::branching_times(simulated_tree)
balanced_tree <- nodeSub::create_balanced_tree(brts)
for (n in 1:max_steps) {
for (g1 in c("any", "terminal")) {
for (g2 in c("random", "youngest", "oldest")) {
unbal_tree <- treestats::make_unbalanced_tree(balanced_tree, n, g1, g2)
focal_stats <- treestats::calc_all_stats(unbal_tree, normalize = FALSE)
to_add <- c(r, n, g1, g2, as.numeric(focal_stats))
found <- rbind(found, to_add)
}
}
cnt <- cnt + 1
}
setTxtProgressBar(pb, cnt)
}
library(tidyverse)
library(dplyr)
test_stuff <- treestats::calc_all_stats(balanced_tree, normalize = FALSE)
colnames(found) <- c("repl", "n", "method1", "method2", names(test_stuff))
found <- tibble::as_tibble(found)
num_pars <- dim(found)[2]
found <- found %>%
mutate_at(c(2, 5:num_pars), as.numeric)
found$combined_method <- NA
for (i in 1:length(found$repl)) {
a1 <- found$method1[i]
a2 <- found$method2[i]
if (a1 == "any") {
if (a2 == "random") found$combined_method[i] <- "A-R"
if (a2 == "youngest") found$combined_method[i] <- "A-Y"
if (a2 == "oldest") found$combined_method[i] <- "A-O"
}
if (a1 == "terminal") {
if (a2 == "random") found$combined_method[i] <- "T-R"
if (a2 == "youngest") found$combined_method[i] <- "T-Y"
if (a2 == "oldest") found$combined_method[i] <- "T-O"
}
}
found$combined_method <- factor(found$combined_method,
levels = c("A-R", "A-O", "A-Y", "T-R", "T-O", "T-Y"))
require(tidyr)
to_plot <- found %>%
filter(combined_method != "A-Y") %>%
gather(key = "stat", val = "balance", -c(n, method1, method2, repl, combined_method)) %>%
group_by(n, method1, method2, stat, combined_method) %>%
summarise("mean_balance" = mean(balance)) %>%
ggplot(aes(x = n, y = mean_balance, col = combined_method)) +
geom_line(lwd = 1.3) +
facet_wrap(~stat, scales = "free") +
theme_classic() +
scale_color_manual(values = c("#4f4dbc", "#8c8cff", "#b54440", "#ff7837", "#fbe1c2")) +
theme(text = element_text(family = "Helvetica")) +
ylab("Statistic value") +
xlab("Number of steps taken towards fully imbalanced tree") +
labs(col = "Algorithm")
to_plot
ggsave(to_plot, filename = "Figure_7_all.pdf", width = 20, height = 15)
